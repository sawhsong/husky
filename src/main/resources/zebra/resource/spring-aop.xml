<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- enabling @AspectJ -->
	<aop:aspectj-autoproxy/>

	<!-- cross-cutting concern -->
	<bean id="loggingAdvice" class="${name.package.framework}.aop.LoggingAdvice" />
	<bean id="exceptionLoggingAdvice" class="${name.package.framework}.aop.ExceptionLoggingAdvice" />

	<!-- configuring AOP using AOP namespace & XML schema -->
	<aop:config>
		<aop:pointcut id="loggingPointcut" expression="execution(* ${name.package.project}..*Biz.*(..)) or execution(* ${name.package.project}..*Dao.*(..)) or execution(* ${name.package.framework}..*Biz.*(..)) or execution(* ${name.package.framework}..*Dao.*(..))" />
		<aop:aspect id="loggingAspect" ref="loggingAdvice">
			<aop:around pointcut-ref="loggingPointcut" method="executeLogging" />
		</aop:aspect>
	</aop:config>
	<aop:config>
		<aop:pointcut id="exceptionLoggingPointcut" expression="execution(* ${name.package.project}..*Biz.*(..)) or execution(* ${name.package.project}..*Dao.*(..)) or execution(* ${name.package.framework}..*Biz.*(..)) or execution(* ${name.package.framework}..*Dao.*(..))" />
		<aop:aspect id="exceptionLoggingAspect" ref="exceptionLoggingAdvice">
			<aop:after-throwing throwing="exception" pointcut-ref="exceptionLoggingPointcut" method="executeLogging"/>
		</aop:aspect>
	</aop:config>

	<!-- Transaction -->
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* ${name.package.project}..*Biz.*(..)) or execution(* ${name.package.project}..*Dao.*(..)) or execution(* ${name.package.framework}..*Biz.*(..)) or execution(* ${name.package.framework}..*Dao.*(..))" />
		<!-- Additional advisor can be added -->
		<!-- Database Transaction Configuration(must be set alternatively MyBatis or Hibernate) -->
<!-- 		<aop:advisor advice-ref="txAdviceForJdbc" pointcut-ref="txPointcut"/> -->
		<aop:advisor advice-ref="txAdviceForHibernate" pointcut-ref="txPointcut"/>
	</aop:config>
	<!-- Transaction Advice -->
	<tx:advice id="txAdviceForJdbc" transaction-manager="txManagerForJdbc">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="select*" read-only="true"/>
			<tx:method name="save*" propagation="REQUIRED" timeout="600" rollback-for="Exception"/>
			<tx:method name="exe*" propagation="REQUIRED" timeout="600" rollback-for="Exception"/>
			<tx:method name="do*" propagation="REQUIRED" timeout="600" rollback-for="Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" timeout="600" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" timeout="600" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" timeout="600" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	<tx:advice id="txAdviceForHibernate" transaction-manager="txManagerForHibernate">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="select*" read-only="true"/>
			<tx:method name="save*" propagation="REQUIRED" timeout="600" rollback-for="Exception"/>
			<tx:method name="exe*" propagation="REQUIRED" timeout="600" rollback-for="Exception"/>
			<tx:method name="do*" propagation="REQUIRED" timeout="600" rollback-for="Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" timeout="600" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" timeout="600" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" timeout="600" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	<!-- Transaction based on Annotation (both are OK) -->
	<tx:annotation-driven transaction-manager="txManagerForJdbc"/>
<!--	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>-->

<!--
	1. tx:method attribute
		1.1 name : [필수] 트랜잭션이 적용될 메서드 이름. '*'을 사용한 설정가능.
		1.2 propagation : [선택/REQUIRED] 트랜잭션 전파 규칙.
		1.3 isolation : [선택/DEFAULT] 트랜잭션 격리 레벨.
		1.4 read-only : [선택/false] 읽기전용 여부.
		1.5 no-rollback-for : [선택/기본값 없음] 트랜잭션을 롤백하지 않을 예외 타입.
		1.6 rollback-for : [선택/기본값 없음] 트랜잭션을 롤백 할 예외 타입.
		1.7 timeout : [선택/-1] 트랜잭션의 타임아웃 시간. 초 단위 설정.

	2. PROPAGATION (일반적으로 별도 처리가 필요하지 않을 경우 REQUIRED 사용)
		2.1 REQUIRED : 이미 Transaction이 존재할 경우 해당 Transaction 사용 / Transaction이 없을 경우 새로운 Transaction 생성
		2.2 MANDATORY : 이미 Transaction이 존재할 경우 해당 Transaction 사용 / Transaction이 없을 경우 Exception 발생
		2.3 REQUIRES_NEW : 이미 Transaction이 존재할 경우 해당 Transaction을 보류시키고 새 Transaction 생성 / Transaction이 없을 경우 새로운 Transaction 생성
		2.4 SUPPORTS : 이미 Transaction이 존재할 경우 해당 Transaction 사용 / Transaction이 없을 경우 그냥 실행
		2.5 NOT_SUPPORTED : 이미 Transaction이 존재할 경우 해당 Transaction을 보류시키고 Transaction 없이 실행 / Transaction이 없을 경우 그냥 실행(Transaction 필요없음)
		2.6 NEVER : 이미 Transaction이 존재할 경우 Exception 발생 / Transaction이 없을 경우 Transaction 없이 실행(Transaction 필요없음)
		2.7 NESTED : 이미 Transaction이 존재할 경우 해당 중첩된 Transaction 실행 / Transaction이 없을 경우 새로운 Transaction 생성
			-> 기존 트랜잭션이 진행중이면 특정 메소드가 반드시 중첩 트랜잭션(nested transaction)내에서 실행되어야 함을 의미.
			   nested transaction은 enclosing transaction과는 별개로 커밋되거나 롤백될 수 있다.
			   enclosing transaction이 없을 경우 REQUIRED와 동일하게 동작한다.

	3. ISOLATION
		3.1 DEFAULT : Datastore의 기본 isolation level 사용
		3.2 READ_UNCOMMITTED : 변경이 아직 커밋되지 않은 데이터에 대한 읽기를 허용한다.(dirty read, phantom read, nonrepeatable read 발생될 수 있다.)
		3.3 READ_COMMITTED : 커밋된 동시 트랜잭션으로부터 읽기를 허용한다.(dirty read 방지, phantom read, nonrepeatable read 발생될 수 있다.)
		3.4 REPEATABLE_READ : 자신이 데이터를 변경하지 않는 한, 동일한 필드에 대한 여러번의 읽기가 동일한 결과를 얻을 수 있도록 한다.(dirty read, nonrepeatable read 방지, phantom read 발생될 수 있다.)
		3.5 SERIALIZABLE : dirty read, phantom read, nonrepeatable read 모두 방지하는 완전한 ACID와 부합되는 분리 레벨이다.(트랜잭션에 관여된 테이블들에 대해 완전한 테이블 잠금을 수행하기 때문에 성능이 가장좋지 않다.)
-->
</beans>