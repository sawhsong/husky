/**************************************************************************************************
 * project
 * Description - Bau0202 - My Bank Accounts
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.bau.bau0202;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.common.module.datahelper.DataHelper;
import project.conf.resource.ormapper.dao.UsrBankAccnt.UsrBankAccntDao;
import project.conf.resource.ormapper.dto.oracle.UsrBankAccnt;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.export.ExportHelper;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.ExportUtil;

public class Bau0202BizImpl extends BaseBiz implements Bau0202Biz {
	@Autowired
	private UsrBankAccntDao usrBankAccntDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String userId = CommonUtil.nvl((String)session.getAttribute("UserIdForAdminTool"), (String)session.getAttribute("UserId"));

		try {
			queryAdvisor.setObject("userId", userId);
			queryAdvisor.setObject("bankCode", requestDataSet.getValue("bankCode"));
			queryAdvisor.setPagination(false);

			paramEntity.setAjaxResponseDataSet(usrBankAccntDao.getDataSetBySearchCriteria(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getEdit(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getBankAccountInfo(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String bankAccntId = requestDataSet.getValue("bankAccntId");
		DataSet bankAccountInfo = new DataSet();

		try {
			bankAccountInfo= usrBankAccntDao.getDataSetByBankAccntId(bankAccntId);
			bankAccountInfo.addColumn("INSERT_USER_NAME", DataHelper.getUserNameById(bankAccountInfo.getValue("INSERT_USER_ID")));
			bankAccountInfo.addColumn("UPDATE_USER_NAME", DataHelper.getUserNameById(bankAccountInfo.getValue("UPDATE_USER_ID")));

			paramEntity.setAjaxResponseDataSet(bankAccountInfo);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doSave(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		HttpSession session = paramEntity.getSession();
		String userId = (String)session.getAttribute("UserId");
		String bankAccntId = "";
		UsrBankAccnt usrBankAccnt = new UsrBankAccnt();
		DataSet bankAccntDataSet = new DataSet();
		int result = -1;

		try {
			bankAccntId = requestDataSet.getValue("bankAccntId");

			if (CommonUtil.isBlank(bankAccntId)) {
				usrBankAccnt.setBankAccntId(CommonUtil.uid());
				usrBankAccnt.setInsertUserId(userId);
				usrBankAccnt.setInsertDate(CommonUtil.toDate(CommonUtil.getSysdate()));
			} else {
				usrBankAccnt.setBankAccntId(bankAccntId);
				usrBankAccnt.setUpdateUserId(userId);
				usrBankAccnt.setUpdateDate(CommonUtil.toDate(CommonUtil.getSysdate()));
			}

			usrBankAccnt.setUserId(userId);
			usrBankAccnt.setBankCode(requestDataSet.getValue("bankCode"));
			usrBankAccnt.setBsb(CommonUtil.remove(requestDataSet.getValue("bsb"), " "));
			usrBankAccnt.setAccntNumber(requestDataSet.getValue("accntNumber"));
			usrBankAccnt.setAccntName(requestDataSet.getValue("accntName"));
			usrBankAccnt.setBalance(CommonUtil.toDouble(requestDataSet.getValue("balance")));
			usrBankAccnt.setDescription(requestDataSet.getValue("description"));

			if (CommonUtil.isBlank(bankAccntId)) {
				result = usrBankAccntDao.insert(usrBankAccnt);
			} else {
				usrBankAccnt.addUpdateColumnFromField();
				result = usrBankAccntDao.update(bankAccntId, usrBankAccnt);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			bankAccntDataSet = usrBankAccntDao.getDataSetByBankAccntId(usrBankAccnt.getBankAccntId());
			bankAccntDataSet.addColumn("INSERT_USER_NAME", DataHelper.getUserNameById(bankAccntDataSet.getValue("INSERT_USER_ID")));
			bankAccntDataSet.addColumn("UPDATE_USER_NAME", DataHelper.getUserNameById(bankAccntDataSet.getValue("UPDATE_USER_ID")));

			paramEntity.setAjaxResponseDataSet(bankAccntDataSet);
			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doDelete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String chkForDel = requestDataSet.getValue("chkForDel");
		String bankAccntId = requestDataSet.getValue("bankAccntId");
		String bankAccntIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = 0;

		try {
			if (CommonUtil.isBlank(bankAccntId)) {
				result = usrBankAccntDao.delete(bankAccntIds);
			} else {
				result = usrBankAccntDao.delete(bankAccntId);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doExport(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		ExportHelper exportHelper;
		String columnHeader[] = new String[] {};
		String pageTitle = "", fileName = "";
		String fileType = requestDataSet.getValue("fileType");
		String dataRange = requestDataSet.getValue("dataRange");

		try {
			exportHelper = ExportUtil.getExportHelper(fileType);
			exportHelper.setPageTitle(pageTitle);
			exportHelper.setColumnHeader(columnHeader);
			exportHelper.setFileName(fileName);
			exportHelper.setPdfWidth(1000);

			if (CommonUtil.containsIgnoreCase(dataRange, "all"))
				queryAdvisor.setPagination(false);
			else {
				queryAdvisor.setPagination(true);
			}

			exportHelper.setSourceDataSet(new DataSet());

			paramEntity.setSuccess(true);
			paramEntity.setFileToExport(exportHelper.createFile());
			paramEntity.setFileNameToExport(exportHelper.getFileName());
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}