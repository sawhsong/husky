/**************************************************************************************************
 * project
 * Description - Bsm0202 - Bank Transaction
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.bsm.bsm0202;

import java.io.File;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.common.module.bizservice.bankstatement.BankStatementBizService;
import project.common.module.commoncode.CommonCodeManager;
import project.common.module.datahelper.DataHelper;
import project.conf.resource.ormapper.dao.UsrBankAccnt.UsrBankAccntDao;
import project.conf.resource.ormapper.dao.UsrBankStatement.UsrBankStatementDao;
import project.conf.resource.ormapper.dao.UsrBankStatementD.UsrBankStatementDDao;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.FileUtil;

public class Bsm0202BizImpl extends BaseBiz implements Bsm0202Biz {
	@Autowired
	private UsrBankAccntDao usrBankAccntDao;
	@Autowired
	private UsrBankStatementDao usrBankStatementDao;
	@Autowired
	private UsrBankStatementDDao usrBankStatementDDao;
	@Autowired
	private BankStatementBizService bankStatementBS;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		DataSet bankAccnt = new DataSet();
		HttpSession session = paramEntity.getSession();
		String userId = CommonUtil.nvl((String)session.getAttribute("UserIdForAdminTool"), (String)session.getAttribute("UserId"));

		try {
			bankAccnt = usrBankAccntDao.getDataSetForSearchCriteriaByUserId(userId);

			paramEntity.setObject("bankAccnt", bankAccnt);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String userId = CommonUtil.nvl((String)session.getAttribute("UserIdForAdminTool"), (String)session.getAttribute("UserId"));
		String bankAccntId = requestDataSet.getValue("bankAccntId");
		String fromDate = requestDataSet.getValue("fromDate");
		String toDate = requestDataSet.getValue("toDate");

		try {
			queryAdvisor.setObject("userId", userId);
			queryAdvisor.setObject("bankAccntId", bankAccntId);
			queryAdvisor.setObject("fromDate", fromDate);
			queryAdvisor.setObject("toDate", toDate);
			queryAdvisor.setPagination(true);

			paramEntity.setAjaxResponseDataSet(usrBankStatementDao.getDataSetBySearchCriteria(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getUpload(ParamEntity paramEntity) throws Exception {
		DataSet bankAccnt = new DataSet();
		HttpSession session = paramEntity.getSession();
		String userId = CommonUtil.nvl((String)session.getAttribute("UserIdForAdminTool"), (String)session.getAttribute("UserId"));

		try {
			bankAccnt = usrBankAccntDao.getDataSetForSearchCriteriaByUserId(userId);

			paramEntity.setObject("bankAccnt", bankAccnt);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getBankAccountInfo(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String bankAccntId = requestDataSet.getValue("bankAccntId");
		DataSet bankAccountInfo = new DataSet();

		try {
			bankAccountInfo= usrBankAccntDao.getDataSetByBankAccntId(bankAccntId);
			bankAccountInfo.addColumn("INSERT_USER_NAME", DataHelper.getUserNameById(bankAccountInfo.getValue("INSERT_USER_ID")));
			bankAccountInfo.addColumn("UPDATE_USER_NAME", DataHelper.getUserNameById(bankAccountInfo.getValue("UPDATE_USER_ID")));
			bankAccountInfo.addColumn("BANK_NAME", CommonCodeManager.getCodeDescription("BANK_TYPE", bankAccountInfo.getValue("BANK_CODE")));

			paramEntity.setAjaxResponseDataSet(bankAccountInfo);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getFile(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String bankStatementId = requestDataSet.getValue("bankStatementId");

		try {
			paramEntity.setAjaxResponseDataSet(usrBankStatementDao.getDataSetByBankStatementId(bankStatementId));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getDetail(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getInfoDataForDetail(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String bankStatementId = requestDataSet.getValue("bankStatementId");

		try {
			queryAdvisor.setObject("bankStatementId", bankStatementId);

			paramEntity.setAjaxResponseDataSet(usrBankStatementDao.getDataSetBySearchCriteria(queryAdvisor));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getBankStatementDetail(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String bankStatementId = requestDataSet.getValue("bankStatementId");

		try {
			paramEntity.setAjaxResponseDataSet(usrBankStatementDDao.getDataSetByBankStatementId(bankStatementId));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doUpload(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		DataSet fileDataSet = paramEntity.getRequestFileDataSet();
		HttpSession session = paramEntity.getSession();
		String bankAccntId = requestDataSet.getValue("bankAccntId");
		String bankCode = requestDataSet.getValue("bankCode");
		String fileName = "";
		DataSet fileData = new DataSet();
		DataSet dupData = new DataSet();

		try {
			discardBankStatement(paramEntity);

			fileName = fileDataSet.getValue("NEW_NAME");

			fileData = bankStatementBS.getBankStatementDataSetFromFileByBank(bankAccntId, bankCode, new File(fileDataSet.getValue("TEMP_PATH")+"/"+fileName));
			dupData = bankStatementBS.getDuplicatedDataSet(fileData);

			if (dupData.getRowCnt() > 0) {
				String msg = "";

				FileUtil.deleteTempFile(fileDataSet);

				paramEntity.setAjaxResponseDataSet(dupData);
				paramEntity.setSuccess(true);
				msg += "There are some duplicated data already uploaded exist.\n";
				msg += "Please check the file and try again.\n\n";
				msg += "Ex.\n";
				for (int i=0; i<dupData.getRowCnt(); i++) {
					String dateTimeFormat = ConfigUtil.getProperty("format.default.dateTime");
					String dateFormat = ConfigUtil.getProperty("format.date.java");

					msg += "Date : "+CommonUtil.changeDateFormat(dupData.getValue(i, "PROC_DATE"), dateTimeFormat, dateFormat)+"\n";
					msg += "Amount : "+CommonUtil.getNumberMask(dupData.getValue(i, "PROC_AMT"), "#,##0.00")+"\n";
					msg += "Balance : "+CommonUtil.getNumberMask(dupData.getValue(i, "BALANCE"), "#,##0.00")+"\n";
					msg += "Description : "+dupData.getValue(i, "PROC_DESCRIPTION")+"\n\n";
				}
				paramEntity.setMessage("E999", msg);

				return paramEntity;
			}

			// Save to session before saving
			session.setAttribute("UploadBankStatementDataFile", fileDataSet);
			session.setAttribute("UploadBankStatementData", fileData);

			paramEntity.setAjaxResponseDataSet(fileData);
			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			try {
				FileUtil.deleteTempFile(fileDataSet);
			} catch (Exception e) {
			}
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity discardBankStatement(ParamEntity paramEntity) throws Exception {
		HttpSession session = paramEntity.getSession();
		File file;
		DataSet fileDataSet;
		String filePathName = "";

		try {
			fileDataSet = (DataSet)session.getAttribute("UploadBankStatementDataFile");

			filePathName = fileDataSet.getValue("TEMP_PATH")+"/"+fileDataSet.getValue("NEW_NAME");

			file = new File(filePathName);
			file.delete();

			// Remove session attribute
			session.removeAttribute("UploadBankStatementDataFile");
			session.removeAttribute("UploadBankStatementData");

			paramEntity.setAjaxResponseDataSet(new DataSet());
			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
		}
		return paramEntity;
	}

	public ParamEntity doSave(ParamEntity paramEntity) throws Exception {
		HttpSession session = paramEntity.getSession();
		String loggedInUserId = (String)session.getAttribute("UserId");
		DataSet fileDataSet, bankFileData;
		String filePathNameTemp = "", filePathNameRepos = "", fileName = "";
		String pathToSave = ConfigUtil.getProperty("path.dir.uploadedBankStatement");
		int result = -1;

		try {
			fileDataSet = (DataSet)session.getAttribute("UploadBankStatementDataFile");
			bankFileData = (DataSet)session.getAttribute("UploadBankStatementData");
			fileName = fileDataSet.getValue("NEW_NAME");
			filePathNameTemp = fileDataSet.getValue("TEMP_PATH")+"/"+fileName;
			filePathNameRepos = pathToSave+"/"+fileName;
			FileUtil.copyFile(new File(filePathNameTemp), new File(filePathNameRepos));

			fileDataSet.addColumn("USER_ID", loggedInUserId);
			bankFileData.addColumn("USER_ID", loggedInUserId);
			fileDataSet.setValue("REPOSITORY_PATH", pathToSave);

			result = bankStatementBS.doSave(fileDataSet, bankFileData);
			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			session.setAttribute("SelectedBankAccntIdInSession", bankFileData.getValue("BANK_ACCNT_ID"));

			discardBankStatement(paramEntity);

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doDelete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String chkForDel = requestDataSet.getValue("chkForDel");
		String bankStatementId = requestDataSet.getValue("bankStatementId");
		String bankStatementIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = 0;

		try {
			if (CommonUtil.isBlank(bankStatementId)) {
				result = usrBankStatementDao.delete(bankStatementIds);
			} else {
				result = usrBankStatementDao.delete(bankStatementId);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}