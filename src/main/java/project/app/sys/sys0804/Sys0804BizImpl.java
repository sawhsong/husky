/**************************************************************************************************
 * project
 * Description - Sys0804 - Reconciliation Category Mgmt.
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.sys.sys0804;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.common.module.datahelper.DataHelper;
import project.conf.resource.ormapper.dao.SysReconCategory.SysReconCategoryDao;
import project.conf.resource.ormapper.dto.oracle.SysReconCategory;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;

public class Sys0804BizImpl extends BaseBiz implements Sys0804Biz {
	@Autowired
	private SysReconCategoryDao sysReconCategoryDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getMainCategory(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setAjaxResponseDataSet(sysReconCategoryDao.getMainCategoryDataSet());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();

		try {
			queryAdvisor.setRequestDataSet(requestDataSet);
			queryAdvisor.setPagination(false);

			paramEntity.setAjaxResponseDataSet(sysReconCategoryDao.getDataSetBySearchCriteria(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getEdit(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getCategory(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String categoryId = requestDataSet.getValue("categoryId");
		DataSet category;

		try {
			category = sysReconCategoryDao.getDataSetByCategoryId(categoryId);
			category.addColumn("INSERT_USER_NAME", DataHelper.getUserNameById(category.getValue("INSERT_USER_ID")));
			category.addColumn("UPDATE_USER_NAME", DataHelper.getUserNameById(category.getValue("UPDATE_USER_ID")));

			paramEntity.setAjaxResponseDataSet(category);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doSave(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		HttpSession session = paramEntity.getSession();
		String loggedInUserId = (String)session.getAttribute("UserId");
		String categoryId = requestDataSet.getValue("categoryId");
		SysReconCategory sysReconCategory = new SysReconCategory();
		DataSet category;
		int result = -1;

		try {
			sysReconCategory = sysReconCategoryDao.getReconCategoryByCategoryId(categoryId);
			if (sysReconCategory == null || CommonUtil.isBlank(sysReconCategory.getCategoryId())) {
				categoryId = CommonUtil.uid();
				sysReconCategory.setCategoryId(categoryId);
				sysReconCategory.setCategoryName(requestDataSet.getValue("categoryName"));
				sysReconCategory.setParentCategoryId(requestDataSet.getValue("parentCategoryId"));
				sysReconCategory.setAccountCode(requestDataSet.getValue("accountCode"));
				sysReconCategory.setSortOrder(requestDataSet.getValue("sortOrder"));
				sysReconCategory.setIsApplyGst(CommonUtil.nvl(requestDataSet.getValue("isApplyGst"), "N"));
				sysReconCategory.setGstPercentage(CommonUtil.toDouble(requestDataSet.getValue("gstPercentage")));
				sysReconCategory.setInsertUserId(loggedInUserId);
				sysReconCategory.setInsertDate(CommonUtil.getSysdateAsDate());

				result = sysReconCategoryDao.insert(sysReconCategory);
			} else {
				sysReconCategory.setCategoryName(requestDataSet.getValue("categoryName"));
				sysReconCategory.setParentCategoryId(requestDataSet.getValue("parentCategoryId"));
				sysReconCategory.setAccountCode(requestDataSet.getValue("accountCode"));
				sysReconCategory.setSortOrder(requestDataSet.getValue("sortOrder"));
				sysReconCategory.setIsApplyGst(CommonUtil.nvl(requestDataSet.getValue("isApplyGst"), "N"));
				sysReconCategory.setGstPercentage(CommonUtil.toDouble(requestDataSet.getValue("gstPercentage")));
				sysReconCategory.setUpdateUserId(loggedInUserId);
				sysReconCategory.setUpdateDate(CommonUtil.getSysdateAsDate());
				sysReconCategory.addUpdateColumnFromField();

				result = sysReconCategoryDao.update(sysReconCategory, categoryId);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			category = sysReconCategoryDao.getDataSetByCategoryId(categoryId);
			category.addColumn("INSERT_USER_NAME", DataHelper.getUserNameById(category.getValue("INSERT_USER_ID")));
			category.addColumn("UPDATE_USER_NAME", DataHelper.getUserNameById(category.getValue("UPDATE_USER_ID")));

			paramEntity.setAjaxResponseDataSet(category);
			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doDelete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String categoryId = requestDataSet.getValue("categoryId");
		String chkForDel = requestDataSet.getValue("chkForDel");
		String categoryIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = -1;

		try {
			if (CommonUtil.isBlank(categoryId)) {
				result = sysReconCategoryDao.delete(categoryIds);
			} else {
				result = sysReconCategoryDao.delete(categoryId);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}

		return paramEntity;
	}
}